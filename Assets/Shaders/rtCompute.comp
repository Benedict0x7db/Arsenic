#version 450

#include "structures.glsl"

layout(local_size_x = 32, local_size_y = 32) in;

#define PI 3.1415926535f
#define GAMMA 2.2f
#define MAX_REFLECTION 8

struct HitRecord
{
    vec3 p;
    vec3 normal;
    vec3 viewDir;
    int materialIndex;
    int status;
};

Material getMaterial(int materialIndex)
{
    return _materialBuffer.materials[materialIndex];
}

vec3 toneMappingGamma(vec3 color)
{
    color = color / (color + 1.0f);
    color = pow(color, vec3(1.0f / GAMMA));
    
    return color;
}

float invSquareLightFallout(float dist, float radius)
{
    float dDist = dist - radius;
    return 1.0f / max((dDist * dDist), 0.001f);    
}

vec3 retrieveEnviromentColor(vec3 d)
{
    vec3 color = texture(sceneEnviromentMap, d).rgb;
    //color = pow(color, vec3(1.0f / GAMMA));
    return color;
}

vec3 calculateWorldFragPos(vec2 uv, vec2 resolution)
{
    float htan = tan(radians(_cameraBuffer.fov * 0.5f));
    float left = -_cameraBuffer.znear * htan;
    float right = -left;
    float bottom = left / _cameraBuffer.aspect;
    float top = -bottom;

    vec3 viewFragPos;
    viewFragPos.x = uv.x * (right - left) + left;
    viewFragPos.y = uv.y * (bottom - top) + top;    
    viewFragPos.z = -_cameraBuffer.znear;

    return vec3(_cameraBuffer.invView * vec4(viewFragPos, 1.0f));
}

float raySphereIntersection(vec3 o, vec3 d, vec3 c, float r, float tmin, float tmax)
{
    vec3 oc = o - c;

    float k1 = dot(d, d);
    float k2 = 2.0f * dot(oc, d);
    float k3 = dot(oc, oc) - (r * r);

    float discrimiant = (k2 * k2) - (4.0f * k1 * k3);

    if (discrimiant < 0.0f) {
        return 0.0f;
    }

    float sqrtDiscrimiant = sqrt(discrimiant);
    float t1 = (-k2 + sqrtDiscrimiant) / (2.0f * k1);
    float t2 = (-k2 - sqrtDiscrimiant) / (2.0f * k1);
    float t = min(t1, t2);

    if (t > tmin && t < tmax) {
        return t;
    }

    return 0.0f;
}

HitRecord castRay(vec3 o, vec3 d, float tmin, float tmax)
{
    int sphereMeshIndex = -1;

    for (int i = 0; i != _sceneBuffer.numSphereMesh; ++i) {
        SphereMesh sphereMesh = _sphereMeshBuffer.sphereMeshes[i];
        float t = raySphereIntersection(o, d, sphereMesh.center, sphereMesh.radius, tmin, tmax);

        if (t != 0.0f) {
            sphereMeshIndex = i;
            tmax = t;
        }
    }

    HitRecord hitRecord;
    hitRecord.status = 0;

    if (sphereMeshIndex != -1) {
        SphereMesh sphereMesh = _sphereMeshBuffer.sphereMeshes[sphereMeshIndex];

        hitRecord.status = 1;
        hitRecord.p = o + tmax * d;
        hitRecord.normal = normalize(hitRecord.p - sphereMesh.center);
        hitRecord.viewDir = normalize(-d);
        hitRecord.materialIndex = sphereMesh.materialIndex;
    }

    return hitRecord;
}

float D_ggx(vec3 N, vec3 H, float roughness)
{      
    float a2     = roughness * roughness;
    float NdotH  = max(dot(N, H), 0.0f);
    float NdotH2 = NdotH * NdotH;
	
    float nom    = a2;
    float denom  = NdotH2 * (a2 - 1.0f) + 1.0f;
    denom        = PI * denom * denom;
	
    return nom / max(denom, 0.001f);
}

float G_schlickGGX(float NdotV, float roughness)
{
    float k = roughness + 1.0f;
    k = (k * k) / 8.0f;
    
    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;
	
    return nom / denom;
}
  
float G_smith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx1  = G_schlickGGX(NdotV, roughness);
    float ggx2  = G_schlickGGX(NdotL, roughness);
	
    return ggx1 * ggx2;
}

vec3 F_schlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0f - F0) * pow(1.0f - cosTheta, 5.0f);
}

vec3 shade(vec3 I, vec3 V, vec3 N, vec3 Li, Material material)
{
    float roughness    = material.roughness;
    float metalness    = material.metalness;
    vec3 baseColor     = material.baseColor.rgb;

    vec3 H          = normalize(I + V);
    float NdotI     = max(dot(N, I), 0.0f);
    float NdotV     = max(dot(N, V), 0.0f);
    float NdotH     = max(dot(N, H), 0.0f);
    float HdotI     = max(dot(H, I), 0.0f);
    
    vec3 F0 = vec3(0.04f);
    F0 = mix(F0, baseColor, metalness);

    float D = D_ggx(N, H, roughness);
    vec3 F  = F_schlick(HdotI, F0);
    float G = G_smith(N, V, I, roughness);
    
    vec3 norm    = D * F * G;
    float denorm = 4.0f * NdotV * NdotI;
    vec3 kd      = (1.0f - F) * (1.0f - metalness);   
   
    vec3 fs = norm / max(denorm, 0.0001f);
    vec3 fd = kd * (baseColor / PI);

    vec3 Lo = (fd + fs) * Li * NdotI;
    Lo += vec3(0.01f) * baseColor * Li;

    return Lo;
}

vec3 calculateDirectLightning(vec3 p, vec3 V, vec3 N, Material material)
{
    vec3 Lo = vec3(0.0f);
    
    for (int i = 0; i != _sceneBuffer.numLights; ++i) {
        Light light = _lightBuffer.lights[i];
               
        switch (light.type) {
            case 0: {
                vec3 I = -normalize(light.position.xyz);
                vec3 Li = light.color.rgb;
                Lo += shade(I, V, N, Li, material);
                break;
            }
        }
    }
       
    return Lo;
}

vec3 calculateIndirectReflection(vec3 p, vec3 n, vec3 d)
{
    HitRecord reflectionRecords[MAX_REFLECTION];
    int reflectRecordCount = 0;

    for (int i = 0; i != _sceneBuffer.numIndirectReflect && i != MAX_REFLECTION; ++i) {
        vec3 r = reflect(d, n);
        HitRecord hitRecord = castRay(p, r, 0.0f, _sceneBuffer.maxRayDepth);

        if (hitRecord.status == 1.0f) {
            d = r;
            n = hitRecord.normal;
            p = hitRecord.p;
            reflectionRecords[i] = hitRecord;
            ++reflectRecordCount;
        }
    }

    if (reflectRecordCount == 0) {
        return retrieveEnviromentColor(reflect(d, n)).rgb;
    }

    vec3 Lo = vec3(0.0f);

    for (int i = reflectRecordCount - 1; i != reflectRecordCount; ++i) {
        HitRecord hitRecord = reflectionRecords[i];
        Material material = getMaterial(hitRecord.materialIndex);

        vec3 directLightning = calculateDirectLightning(hitRecord.p, hitRecord.viewDir, hitRecord.normal, material);

        vec3 r = normalize(reflect(-hitRecord.viewDir, hitRecord.normal));
        vec3 Li = Lo;
        vec3 indirectLightning = shade(r, hitRecord.viewDir, hitRecord.normal, Li, material);

        Lo = directLightning + indirectLightning;
    }

    return Lo;
}

void main()
{
    ivec2 fragCoord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 resolution = ivec2(imageSize(rtrenderTarget));
    vec2 uv = vec2(fragCoord) / vec2(resolution);

    vec3 worldFragPos = calculateWorldFragPos(uv, vec2(resolution));
    vec3 o = _cameraBuffer.cameraPos.xyz;
    vec3 d = worldFragPos - o;

    vec3 Lo = retrieveEnviromentColor(d);
    HitRecord hitRecord = castRay(o, d, _cameraBuffer.znear, _cameraBuffer.zfar);

    if (hitRecord.status == 1) {
       Material material = getMaterial(hitRecord.materialIndex);
       
       {
           vec3 I = normalize(-reflect(hitRecord.viewDir, hitRecord.normal));
           vec3 Li = calculateIndirectReflection(hitRecord.p, hitRecord.normal, d);
           Lo = shade(I, hitRecord.viewDir, hitRecord.normal, Li, material);
       }

       {
           vec3 I = hitRecord.normal;
           vec3 Li = calculateIndirectReflection(hitRecord.p, hitRecord.normal, hitRecord.normal);
           Lo += shade(I, hitRecord.viewDir, hitRecord.normal, Li, material);
       }

       Lo += calculateDirectLightning(hitRecord.p, hitRecord.viewDir, hitRecord.normal, material);
    }

    vec3 color = toneMappingGamma(Lo);

    vec4 fragColor = vec4(color, 1.0f);
    imageStore(rtrenderTarget, fragCoord, fragColor);    
}